// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HandlerClient is the client API for Handler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HandlerClient interface {
	FetchInfos(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Action(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionResponse, error)
}

type handlerClient struct {
	cc grpc.ClientConnInterface
}

func NewHandlerClient(cc grpc.ClientConnInterface) HandlerClient {
	return &handlerClient{cc}
}

func (c *handlerClient) FetchInfos(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error) {
	out := new(ObjectResponse)
	err := c.cc.Invoke(ctx, "/Handler/FetchInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/Handler/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) Action(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/Handler/Action", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HandlerServer is the server API for Handler service.
// All implementations must embed UnimplementedHandlerServer
// for forward compatibility
type HandlerServer interface {
	FetchInfos(context.Context, *ObjectRequest) (*ObjectResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Action(context.Context, *ActionRequest) (*ActionResponse, error)
	mustEmbedUnimplementedHandlerServer()
}

// UnimplementedHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedHandlerServer struct {
}

func (UnimplementedHandlerServer) FetchInfos(context.Context, *ObjectRequest) (*ObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchInfos not implemented")
}
func (UnimplementedHandlerServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedHandlerServer) Action(context.Context, *ActionRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Action not implemented")
}
func (UnimplementedHandlerServer) mustEmbedUnimplementedHandlerServer() {}

// UnsafeHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HandlerServer will
// result in compilation errors.
type UnsafeHandlerServer interface {
	mustEmbedUnimplementedHandlerServer()
}

func RegisterHandlerServer(s grpc.ServiceRegistrar, srv HandlerServer) {
	s.RegisterService(&Handler_ServiceDesc, srv)
}

func _Handler_FetchInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).FetchInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Handler/FetchInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).FetchInfos(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Handler/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_Action_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).Action(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Handler/Action",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).Action(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Handler_ServiceDesc is the grpc.ServiceDesc for Handler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Handler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Handler",
	HandlerType: (*HandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchInfos",
			Handler:    _Handler_FetchInfos_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Handler_Login_Handler,
		},
		{
			MethodName: "Action",
			Handler:    _Handler_Action_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
